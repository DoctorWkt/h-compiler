.comment This comes from Doug McIlroy's Ratfor version of roff
.rm 75
.he 'Chapter 4''Page %'
.fo ''%''
.ls 2
.ce
.ul
SORTING
.PP
.sp
.ti +5
Sorting is an everyday programming task,
and often a building block in larger processes.
In this chapter we will tackle sorting, but
we will be more concerned with how a sort should appear to its users
than with presenting some ``best possible'' sorting algorithm.
If the sorting program is so poorly packaged
that users feel compelled to write their own
instead of figuring out how to use it,
then the quality of the algorithm it uses is irrelevant.
But if the packaging is good,
if users perceive sorting as an easy-to-use 
.ul
tool,
then it will be used, the algorithm can be improved as needed;
and
.ul
all
users will benefit.
.SH
.bp
.ce
.ul
Bubble Sort
.PP
.sp
.ti +5
Every programmer is familiar with some variant of the 
interchange sort.
For example the
.ul
bubble sort
sorts an array into ascending order like this:
.P1
.sp
.nf
.in +5
.ls 1
# bubble _ bubble sort v(1) ... v(n) increasing
	subroutine bubble(v, n)
	integer i, j, k, n, v(n)

	for (i = n; i > 1; i = i-1)
		for (j = 1; j < i; j = j + 1)
			if (v(j) > v(j+1)) {	# compare
				k = v(j)		# exchange
				v(j) = v(j+1)		#
				v(j+1) = k		#
				}
	return
	end
.P2
.sp
.fi
.in -5
.ls 2
The inner loop rearranges out-of-order adjacent elements
on each pass;
by the end of the pass, the largest element
has been ``bubbled'' to the top,
that is, to
.ul
v(i).
The outer loop repeats the process, each time decreasing the current array limit 
.ul
i
by one.
.PP
.sp
.ti +5
The main advantage of the bubble sort is its simplicity.
Its drawback, a serious one,
is that it gets very slow very fast
as 
the number of elements to be sorted
gets large.
The 
.ul
time complexity 
of bubble sorting (and similar sorts) is O(n^2).
That is, the time required to sort varies
as the square of the number of items to be sorted:
twice as big takes about four times as long.
How large is too large?
That depends on the alternative being considered,
and on how often the data is to be sorted,
but something between
ten
and
fifty
items
might be a reasonable limit,
above which the bubble sort
is better replaced by a more sophisticated algorithm.
.PP
.sp
.ti +5
In real life, by the way,
you would certainly name the routine
.ul
sort,
not
.ul
bubble,
so you could change the algorithm without upsetting users.
We use
.ul
bubble
here because we want a unique name for each program.
.SH
.bp
.ce
.ul
Shell Sort
.PP
.sp
.ti +5
In a sense, the Shell sort is the next step up in complexity
from the bubble sort;
we present it because it is similar in spirit, compact,
but much faster for larger arrays.
The time complexity of the Shell sort is approximately
O(n^(3/2)).
.PP
.sp
.ti +5
The basic idea of the Shell sort is that
in the early stages far-apart elements are compared,
instead of adjacent ones.
This tends to eliminate large amounts of disorder quickly,
so later stages have less work to do.
Gradually the interval between compared elements is decreased,
until it reaches one,
at which point it effectively
becomes
an adjacent interchange method.
.P1
.sp
.nf
.in +5
.ls 1
# shell _ Shell sort v(1)...v(n) increasing
	subroutine shell(v, n)
	integer gap, i, j, jg, k, n, v(n)

	for (gap = n/2; gap > 0; gap = gap/2)
		for (i = gap + 1; i <= n; i = i + 1)
			for (j = i - gap; j > 0; j = j - gap) {
				jg = j + gap
				if (v(j) <= v(jg))	# compare
					break
				k = v(j)		# exchange
				v(j) = v(jg)		#
				v(jg) = k		#
				}
	return
	end
.P2
.sp
.fi
.in -5
.ls 2
The outermost loop controls the gap between compared elements.
Initially
.ul
n/2,
it shrinks by a factor of two each pass until it becomes zero.
The middle loop compares elements separated by
.ul
gap;
the innermost loop reverses any that are out of order.
Since
.ul
gap
is eventually reduced to one,
eventually all elements are ordered correctly.
.PP
.sp
.ti +5
A word on modularity.
Many sorting procedures
have three distinct parts.
A
.ul
comparison
operation
decides what the order of two elements is.
An
.ul
exchange
operation interchanges two out-of-order elements.
Finally, a
.ul
sorting algorithm
decides what comparisons and exchanges must be made.
Often the only thing that need change between
two sorting procedures is the algorithm,
so a program should be carefully organized to take this into account.
If the three functions are clearly separated,
each may be individually improved
without affecting the others.
.EX
In our version of the Shell sort,
when two out-of-order elements are found they are immediately exchanged.
If an element is small relative to the other elements
at the current gap, however,
several unnecessary exchanges may be performed.
Redistribute the exchange so
the element moving toward the beginning of the array is held in a temporary location
until its correct position has been found.
Measure this version to decide
if the increase in speed outweighs
the loss of clarity in the algorithm.
.XE
.EX
How would you test a sorting program?
What are the obvious boundary conditions that must be checked
to ensure correct operation?
What programs would you write to help in your verification?
What programs have we already written that help?
.XE
.EX
Compare the bubble sort and the Shell sort experimentally.
Where is the crossover point at which the Shell sort
becomes better on your machine?
.XE
.EX
The Shell sort
has been observed to
run somewhat faster when the value of
.ul
gap
is always odd.
Modify
.ul
shell
accordingly
and experiment to see how large the effect is.
.XE
